Selezionare tutti gli eventi gratis, cioè con prezzo nullo (19)

SELECT *
FROM events
WHERE price IS NULL;
----------------------------------------------------------------
Selezionare tutte le location in ordine alfabetico (82)

SELECT *
FROM locations
ORDER BY name ASC;
----------------------------------------------------------------
Selezionare tutti gli eventi che costano meno di 20 euro e durano meno di 3 ore (38)

SELECT *
FROM events
WHERE price < 20 AND duration < '03:00:00';
----------------------------------------------------------------
Selezionare tutti gli eventi di dicembre 2023 (25)

SELECT *
FROM events
WHERE start >= '2023-12-01' AND start < '2024-01-01';
----------------------------------------------------------------

Selezionare tutti gli eventi con una durata maggiore alle 2 ore (946)

SELECT *
FROM events
WHERE duration > '02:00:00';
-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

Selezionare tutti gli eventi con una durata maggiore alle 2 ore e 45 per avere questo risultato (823)
SELECT *
FROM events
WHERE duration > '02:45:00';

--------------------------------------------------------------------

Selezionare tutti gli eventi, mostrando nome, data di inizio, ora di inizio, ora di fine e
durata totale (1040)

SELECT 
  name,
  start AS start,
  TIME_FORMAT(start, '%H:%i') AS start,
  TIME_FORMAT(ADDTIME(start, duration), '%H:%i') AS duration,
  duration AS durata_totale
FROM events;
----------------------------------------------------------------


Selezionare tutti gli eventi aggiunti da “Fabiano Lombardo” (id: 1202) (132)

SELECT *
FROM events
WHERE user_id = 1202;
----------------------------------------------------------------

Selezionare il numero totale di eventi per ogni fascia di prezzo (81)

SELECT events.*
FROM events
WHERE (price, id) IN (
    SELECT MIN(price) AS price, MIN(id) AS id
    FROM events
    WHERE price BETWEEN 0 AND 300
    GROUP BY price
);

----------------------------------------------------------------


Selezionare tutti gli utenti admin ed editor (9)

SELECT *
FROM users
WHERE role_id IN (1, 2);
----------------------------------------------------------------


Selezionare tutti i concerti (eventi con il tag “concerti”) (72)

SELECT events.*
FROM events
JOIN event_tag ON events.id = event_tag.event_id
JOIN tags ON event_tag.tag_id = tags.id
WHERE tags.name = 'concerti';
---------------------------------------------------------------


Selezionare tutti i tag e il prezzo medio degli eventi a loro collegati (11)

SELECT
  tags.name AS tag_name,
  AVG(events.price) AS average_price
FROM tags
JOIN event_tag ON tags.id = event_tag.tag_id
JOIN events ON event_tag.event_id = events.id
GROUP BY tags.id, tags.name;
----------------------------------------------------------------


Selezionare tutte le location e mostrare quanti eventi si sono tenute in ognuna di
esse (82)

SELECT locations.name AS location_name, COUNT(events.id) AS num_events
FROM events
JOIN locations ON events.location_id = locations.id
GROUP BY locations.id, locations.name;
----------------------------------------------------------------


Selezionare tutti i partecipanti per l’evento “Concerto Classico Serale” (slug:
concerto-classico-serale, id: 34) (30)

SELECT users.*
FROM users
JOIN bookings ON users.id = bookings.user_id
JOIN events ON bookings.event_id = events.id
WHERE events.id = 34;
----------------------------------------------------------------


Selezionare tutti i partecipanti all’evento “Festival Jazz Estivo” (slug:
festival-jazz-estivo, id: 2) specificando nome e cognome (13)

SELECT users.first_name, users.last_name
FROM users
JOIN bookings ON users.id = bookings.user_id
JOIN events ON bookings.event_id = events.id
WHERE events.id = 2;
----------------------------------------------------------------

Selezionare tutti gli eventi sold out (dove il totale delle prenotazioni è uguale ai
biglietti totali per l’evento) (18)

SELECT events.*
FROM events
WHERE events.total_tickets = (
    SELECT COUNT(*)
    FROM bookings
    WHERE bookings.event_id = events.id
);
----------------------------------------------------------------

Selezionare tutte le location in ordine per chi ha ospitato più eventi (82)

SELECT locations.*, COUNT(events.id) AS num_events
FROM locations
LEFT JOIN events ON locations.id = events.location_id
GROUP BY locations.id
ORDER BY num_events DESC;
----------------------------------------------------------------


Selezionare tutti gli utenti che si sono prenotati a più di 70 eventi (74)

SELECT users.*, COUNT(bookings.id) AS num_bookings
FROM users
JOIN bookings ON users.id = bookings.user_id
GROUP BY users.id
HAVING num_bookings > 70;
----------------------------------------------------------------


Selezionare tutti gli eventi, mostrando il nome dell’evento, il nome della location, il
numero di prenotazioni e il totale di biglietti ancora disponibili per l’evento (1040)

SELECT
    events.name AS event_name,
    locations.name AS location_name,
    COUNT(bookings.id) AS num_bookings,
    (events.total_tickets - COUNT(bookings.id)) AS tickets_available
FROM
    events
JOIN
    locations ON events.location_id = locations.id
LEFT JOIN
    bookings ON events.id = bookings.event_id
GROUP BY
    events.id, locations.id
ORDER BY
    events.name;
----------------------------------------------------------------